#
# Settings for iptables init script
#
LOOPBACK=127.0.0.0/8

ETH=192.168.1.0/24


# FILTER rules
INPUT="
# CONNECTION state
state:INVALID j:DROP
eth0 dst:$ETH state:RELATED,ESTABLISHED

# ICMP
eth0 icmp:echo-request src:$ETH dst:$ETH c:Allow_PING_in_for_eth0_network
lo src:$LOOPBACK dst:$LOOPBACK c:Allow_Loopback

# PORT RULES
udp:68:67 c:Allow_DHCP_server_in_from_all

eth0 dst:$ETH tcp:22 c:Allow_SSH_in_for_eth0
eth0 src:$ETH dst:$ETH tcp:53 c:Allow_DNS_in_for_eth0
eth0 src:$ETH dst:$ETH udp:53 c:Allow_DNS_in_for_eth0
eth0 src:$ETH dst:$ETH udp:123 c:Allow_NTP_in_for_eth0
"

OUTPUT="
state:INVALID j:DROP
eth0 src:$ETH state:RELATED,ESTABLISHED

eth0 icmp:echo-request src:$ETH c:Allow_ICMP_out_from_eth0
lo src:$LOOPBACK dst:$LOOPBACK c:Allow_Loopback

udp:67:68 c:Allow_DHCP_server_out_from_all

eth0 src:$ETH tcp:53 c:Allow_DNS_out_from_eth0
eth0 src:$ETH udp:53 c:Allow_DNS_out_from_eth0
eth0 src:$ETH udp:80 c:Allow_HTTP_out_from_eth0
eth0 src:$ETH udp:123 c:Allow_NTP_out_from_eth0
"

FORWARD="
state:INVALID j:DROP
icmp c:Allow_ICMP_routing

tcp:20-21 c:Allow_FTP_routing
tcp:22 c:Allow_SSH_routing
tcp:43 c:Allow_WHOIS_routing
tcp:80 c:Allow_HTTP_routing
tcp:443 c:Allow_HTTPs_routing
tcp:993 c:Allow_IMAPs_routing
tcp:8000 c:Allow_HTTP-ALT_routing
"

# NAT rules
PREROUTING="
"

POSTROUTING="
eth0 src:$ETH j:MASQUERADE c:Masquerade_connection_from_ETH_network 
"

# Manual pre and post commands (do not specify 'iptables' just put the following option)
PRE_COMMANDS="
"
POST_COMMANDS="
"


### Global setting
# [boolean ] This boolean define if this host is a router, and load more rules consequently
#IS_ROUTER=$(sysctl --values net.ipv4.ip_forward)

# [string] Override the default rules action when no jump command is given
#DEFAULT_ACTION=ACCEPT



### SECURITY settings
# [boolean]Â Toggle all security features
IS_SECURITY_ENABLED=1

# [boolean] Load an anti ddos rules set in a new chain named DDOS_PROTECT
SECURITY_DDOS_RULES=1

# [string] List of anti ddos rules
DDOS_RULES="
# drop incorrect flag
-p tcp --tcp-flags ALL ALL -j DROP
-p tcp --tcp-flags ALL NONE -j DROP

# drop SYN+FIN
-p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 1/s --limit-burst 5 -j RETURN
-p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

# drop too more SYN
-p tcp --syn -m limit --limit 1000/s --limit-burst 100 -j RETURN
-p tcp --syn -j DROP

# drop too more tcp RST
-p tcp --tcp-flags FIN,SYN,RST,ACK RST -m limit --limit 1/s --limit-burst 5 -j RETURN
-p tcp --tcp-flags FIN,SYN,RST,ACK RST -j DROP

# drop too more tcp FIN
-p tcp --tcp-flags ALL FIN -m limit --limit 1000/s --limit-burst 100 -j RETURN
-p tcp --tcp-flags ALL FIN -j DROP
"

# [boolean] Load an icmp protection rules set in a new chain named ICMP_PROTECT
SECURITY_ICMP_RULES=1

# [string] List of icmp protection rules
ICMP_RULES="
-p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 5 -j RETURN
-p icmp --icmp-type echo-request -j DROP
-p icmp --fragment -j DROP
"



### Script options
# [Integer] Number of second to wait before re apply old rules when 'test' command is launch
#TIMEOUT_FOR_TEST=5


# List of service name whose needs to be restart after firewall restarting
# WARNING: this variable is sourced only by the service script
SERVICES="fail2ban"





# Don't touch this vars
IF_CONFIG_SOURCED=1
